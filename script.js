// Используются функции, циклы, массивы, объекты
// Есть взаимодействие через alert/prompt/confirm

// Когда DOM полностью загружен
document.addEventListener('DOMContentLoaded', () => {
 // ... внутри этого блока будет всё наше основное взаимодействие
/* Что делает:
Это событие DOMContentLoaded — оно срабатывает, когда вся HTML-страница полностью загружена и
структура DOM (Document Object Model) готова к манипуляциям.
Зачем нужно:
Чтобы убедиться, что все элементы страницы доступны, прежде чем к ним обращаться через JavaScript.  */
 
 // Обработка кнопки "Узнать смешной факт" на главной странице
 const funnyBtn = document.getElementById('funnyBtn');
 if (funnyBtn) {
   funnyBtn.addEventListener('click', () => {
/* Что делает:
document.getElementById('funnyBtn') — ищет на странице кнопку с ID funnyBtn.
if (funnyBtn) — проверяет, существует ли такая кнопка (чтобы избежать ошибок, если вдруг её нет).
addEventListener('click', ...) — добавляет обработчик события клика на кнопку.
Зачем нужно:
Чтобы при клике на кнопку запускать определённую функцию — в нашем случае, показывать шутку и картинку. */
     
     // Массив забавных фактов
     const facts = [
       "Когда программист видит баг, он не плачет — он устраивает с ним «дуэль» и ищет, кто быстрее его победит. Побеждает тот, кто быстрее перезагрузит компьютер.",
       "Настоящий программист может объяснить, почему его код — это произведение искусства, а все остальные — «какой-то мусор». И при этом сам не может объяснить, почему он написал именно так.",
       "«Hello, World!» — первый шаг программиста: практически каждый новичок в программировании начинает с этой фразы. А некоторые до сих пор не могут избавиться от привычки писать «Hello, World!» при каждом новом проекте.",
      "Программистов можно узнать по тому, что их любимая фраза — «Это не баг, это фича!» А иногда и вовсе — «Это не баг, это мой эксперимент, который вышел из-под контроля».",
      "Если у вас есть друг-программист, он может часами обсуждать разницу между «==» и «===», а вы вообще не поймёте, что он говорит. Но зато он точно знает, как исправить ошибку за 3 секунды, которая у вас занимает 3 дня.",
      "В жизни программиста есть только два состояния: «Загружено» и «Перезагружено». А иногда — «Зависло и не реагирует».",
      "Когда программист говорит «Почему всё работает?», — это значит, что он только что перезагрузил компьютер и надеется, что всё исправится. Реально, магия.",
      "Настоящий программист может понять смысл любой ошибки за 2 секунды, а вот объяснить его — за две недели.",
      "Есть теория, что у программиста есть специальный язык: он говорит на английском, а думает на двоичных кодах и переменных. И иногда даже с кем-то общается только через комментарии в коде.",
      "Программистам свойственно устраивать «битвы» с компьютером: кто кого — они или баги. Обычно выигрывают баги, потому что они «затягиваются» больше, чем сериал.",
      "Когда программист говорит, что он «просто допиливает» код, — это значит, что он уже сидит там три ночи и не знает, зачем вообще сюда полез.",
       "Самая страшная вещь для программиста — это потерять свой комментарий в коде. Потому что без него всё выглядит как загадка для всех, кроме него самого.",
     ];
 /* Что делает:
Создаёт массив из строк — каждый элемент массива это забавный факт.
Зачем нужен:
Чтобы случайным образом выбирать один из них при клике. Массив — это структура данных для хранения нескольких значений.  */

     // Объект с картинками
     const images = {
       coffee: 'images/кофе.png',
       bug: 'images/баг.png',
       code: 'images/код.png'
     };
     /* Что делает:
Создаёт объект — набор ключей (coffee, bug, code) и соответствующих путей к картинкам.
Зачем нужен:
Чтобы динамически получать разные картинки, связанные с шутками или фактами.  */

     // Функция получения случайного элемента массива
     function getRandom(arr) {
       return arr[Math.floor(Math.random() * arr.length)];
     }
     /* Что делает:  
Math.random() — генерирует случайное число от 0 до 1.
Умножение на arr.length — масштабирует число до диапазона длины массива.
Math.floor() — округляет число вниз до целого, чтобы получить индекс массива.
arr[...] — возвращает элемент массива по случайному индексу.
Зачем нужен:
Чтобы выбрать случайный шутку или картинку из массива или объекта. */

     // Вызов функции для получения случайной шутки
     const joke = getRandom(facts);
     alert(`Факт: ${joke}`);
     /* Что делает:  
Выбирает случайную шутку из массива facts.
Показывает её пользователю через окно alert() с подписью "Факт:".
Зачем нужно:
Обеспечить взаимодействие: пользователь видит случайную шутку. */

     // Выбор случайной картинки
     const imageKeys = Object.keys(images);
     const randomKey = getRandom(imageKeys);
     const imgSrc = images[randomKey];

     // Открываем новое окно с картинкой
     const imgWindow = window.open();
     imgWindow.document.write(`<h3>Посмотрите на это!</h3>`);
     imgWindow.document.write(`<img src="${imgSrc}" alt="IT шутка" style="max-width:100%;height:auto;">`);
   });
 }
 /* Выбор случайной картинки и открытие нового окна
 Что делает:  
Object.keys(images) — получает массив ключей объекта images (['coffee','bug','code']).
getRandom(imageKeys) — выбирает случайный ключ из этого массива.
images[randomKey] — получает путь к картинке по выбранному ключу.
window.open() — открывает новое окно или вкладку браузера.
В это окно вставляется HTML-код через document.write(): заголовок и изображение с выбранным путём.
Зачем нужно:
Показать пользователю картинку, связанную с выбранной шуткой, в отдельной вкладке. */

 // Обработка кнопки "Случайная цитата программиста"
 const randomQuoteBtn = document.getElementById('randomQuoteBtn');
 if (randomQuoteBtn) {
   randomQuoteBtn.addEventListener('click', () => {
     const quotes = [
       "«Сложность — это дьявол. Простота — это бог.» – Рич Хикки",
       "«Сначала реши проблему. Потом пиши код.» – Джон Джонсон",
       "«Оптимизация — зло. Первые 90% времени тратится на первые 10% кода. Оставшиеся 10% времени тратятся на оставшиеся 90% кода.» – Том Каргулл"
     ];
     const quote = getRandom(quotes);
     alert(`Цитата: ${quote}`);
   });
 }
 /* const randomQuoteBtn = document.getElementById('randomQuoteBtn');:

document.getElementById('randomQuoteBtn'): Эта функция пытается найти HTML-элемент в документе с id, равным "randomQuoteBtn". Предполагается, что в HTML-коде есть кнопка с таким id: <button id="randomQuoteBtn">...</button>.
const randomQuoteBtn = ...: Результат поиска (либо HTML-элемент, либо null, если элемент не найден) сохраняется в константе randomQuoteBtn. Использование const означает, что значение этой переменной не может быть изменено после присвоения.
if (randomQuoteBtn) { ... }:

Это условный оператор. Он проверяет, была ли кнопка успешно найдена. Если randomQuoteBtn не null (то есть, элемент с id="randomQuoteBtn" существует в HTML), то код внутри фигурных скобок {} будет выполнен. Это важная проверка, чтобы избежать ошибок, если кнопка случайно отсутствует на странице.
randomQuoteBtn.addEventListener('click', () => { ... });:

randomQuoteBtn.addEventListener('click', ...): Эта функция добавляет слушателя событий (event listener) к найденной кнопке. Слушатель событий “слушает” определенные события, происходящие с элементом (в данном случае, событие click, то есть щелчок мышью).
'click': Это тип события, которое мы отслеживаем.
() => { ... }: Это анонимная функция (или “лямбда-функция”). Она будет вызвана, когда произойдет событие click на кнопке. Вся логика, связанная с нажатием кнопки, находится внутри этой функции.
const quotes = [ ... ];:

Это массив строк. Каждая строка представляет собой цитату программиста. Массивы используются для хранения упорядоченных коллекций данных.
const quote = getRandom(quotes);:

getRandom(quotes): Эта функция (предположительно определенная где-то в другом месте кода) выбирает случайный элемент из массива quotes.
const quote = ...: Выбранная случайная цитата сохраняется в константе quote.
alert(Цитата: ${quote});:

alert(...): Эта функция отображает диалоговое окно с заданным сообщением.
Цитата: ${quote}: Это шаблонная строка (template literal). Она позволяет вставлять значения переменных (в данном случае, значение переменной quote) внутрь строки. ${quote} заменяется на фактическую цитату. Обратите внимание на обратные кавычки “ вместо обычных кавычек ' или " для шаблонных строк. */

 // Обработка кнопки "Совет по программированию"
 const programmingTipBtn = document.getElementById('programmingTipBtn');
 if (programmingTipBtn) {
   programmingTipBtn.addEventListener('click', () => {
     const tips = [
       "Всегда комментируйте свой код.",
       "Разбивайте сложные задачи на более мелкие.",
       "Используйте систему контроля версий (например, Git)."
     ];
     const tip = getRandom(tips);
     alert(`Совет: ${tip}`);
   });
 }
 /* Этот код почти идентичен коду для “Случайной цитаты программиста”, за исключением:

Он использует кнопку с id="programmingTipBtn".
Он использует массив tips для хранения советов по программированию.
Он показывает сообщение “Совет: ” вместо “Цитата: “. */

 // Обработка кнопки "Интересный IT-факт"
 const funFactBtn = document.getElementById('funFactBtn');
 if (funFactBtn) {
   funFactBtn.addEventListener('click', () => {
     const facts = [
       "Первый компьютерный вирус был создан в 1983 году.",
       "Язык программирования Python назван в честь комик-группы «Монти Пайтон».",
       "Первый программист — женщина. Её звали Ада Лавлейс."
     ];
     const fact = getRandom(facts);
     alert(`Факт: ${fact}`);
   });
 }
 /* Этот код снова похож на предыдущие два, но:

Он использует кнопку с id="funFactBtn".
Он использует массив facts для хранения интересных IT-фактов.
Он показывает сообщение “Факт: ” вместо “Цитата: ” или “Совет: “. */
 
 // Обработка кнопки "Добавить свою шутку" на странице шуток
 const addJokeBtn = document.getElementById('addJokeBtn');
 if (addJokeBtn) {
   addJokeBtn.addEventListener('click', () => {
     // Используем prompt для ввода новой шутки
     const newJoke = prompt('Введите свою IT-шутку:');
     if (newJoke && newJoke.trim() !== '') {
       // Находим список шуток
       const jokeList = document.getElementById('jokeList');
       // Создаем новый элемент списка
       const li = document.createElement('li');
       li.textContent = newJoke;
       // Добавляем в список
       jokeList.appendChild(li);
       // Подтверждение
       alert('Ваша шутка добавлена!');
     } else {
       // Отмена или пустой ввод
       alert('Шутка не добавлена.');
     }
   });
  
 }
 /* Что делает:
 Находит кнопку по ID addJokeBtn.
При клике вызывает функцию-обработчик.
Внутри обработчика:
prompt() — показывает диалог для ввода текста шутки.
Проверяет, что пользователь что-то ввёл (newJoke) и что строка не пустая (trim() !== '').
Находит список ul с ID jokeList.
Создаёт новый элемент li (элемент списка).
Устанавливает текст этого элемента — введённую шутку.
Добавляет этот элемент в список (appendChild).
Показывает подтверждение через alert().
Если пользователь ничего не ввёл или отменил — выводит сообщение, что шутка не добавлена.
Зачем нужно:
Дать возможность пользователю добавлять свои шутки в список на странице. */
});

function getRandom(arr) {
 return arr[Math.floor(Math.random() * arr.length)];
}

/* Этот скрипт реализует несколько ключевых задач:  

Обработку кликов по кнопкам.
Генерацию случайных элементов из массивов и объектов.
Взаимодействие с пользователем через окна alert, prompt.
Динамическое изменение содержимого страницы (добавление элементов).
Открытие новых окон с контентом (картинки). */
